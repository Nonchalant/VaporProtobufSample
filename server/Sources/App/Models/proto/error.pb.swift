// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/error.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

struct NetworkError: SwiftProtobuf.Message {
    static let protoMessageName: String = "NetworkError"

    var code: NetworkError.Code = .unknown

    var message: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum Code: SwiftProtobuf.Enum {
        typealias RawValue = Int
        case unknown // = 0
        case badRequest // = 400
        case unauthorized // = 401
        case forbidden // = 403
        case notFound // = 404
        case internalServerError // = 500
        case UNRECOGNIZED(Int)

        init() {
            self = .unknown
        }

        init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .unknown
            case 400: self = .badRequest
            case 401: self = .unauthorized
            case 403: self = .forbidden
            case 404: self = .notFound
            case 500: self = .internalServerError
            default: self = .UNRECOGNIZED(rawValue)
            }
        }

        var rawValue: Int {
            switch self {
            case .unknown: return 0
            case .badRequest: return 400
            case .unauthorized: return 401
            case .forbidden: return 403
            case .notFound: return 404
            case .internalServerError: return 500
            case let .UNRECOGNIZED(i): return i
            }
        }
    }

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularEnumField(value: &code)
            case 2: try decoder.decodeSingularStringField(value: &message)
            default: break
            }
        }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if code != .unknown {
            try visitor.visitSingularEnumField(value: code, fieldNumber: 1)
        }
        if !message.isEmpty {
            try visitor.visitSingularStringField(value: message, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension NetworkError: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "code"),
        2: .same(proto: "message"),
    ]

    func _protobuf_generated_isEqualTo(other: NetworkError) -> Bool {
        if code != other.code { return false }
        if message != other.message { return false }
        if unknownFields != other.unknownFields { return false }
        return true
    }
}

extension NetworkError.Code: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "UNKNOWN"),
        400: .same(proto: "BAD_REQUEST"),
        401: .same(proto: "UNAUTHORIZED"),
        403: .same(proto: "FORBIDDEN"),
        404: .same(proto: "NOT_FOUND"),
        500: .same(proto: "INTERNAL_SERVER_ERROR"),
    ]
}
